// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: status.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SvcStatusClient is the client API for SvcStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SvcStatusClient interface {
	SendStatus(ctx context.Context, in *PbStatus, opts ...grpc.CallOption) (*PbResp, error)
	SendStatuses(ctx context.Context, in *PbStatuses, opts ...grpc.CallOption) (*PbResp, error)
}

type svcStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewSvcStatusClient(cc grpc.ClientConnInterface) SvcStatusClient {
	return &svcStatusClient{cc}
}

func (c *svcStatusClient) SendStatus(ctx context.Context, in *PbStatus, opts ...grpc.CallOption) (*PbResp, error) {
	out := new(PbResp)
	err := c.cc.Invoke(ctx, "/PbStatus.SvcStatus/SendStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcStatusClient) SendStatuses(ctx context.Context, in *PbStatuses, opts ...grpc.CallOption) (*PbResp, error) {
	out := new(PbResp)
	err := c.cc.Invoke(ctx, "/PbStatus.SvcStatus/SendStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SvcStatusServer is the server API for SvcStatus service.
// All implementations must embed UnimplementedSvcStatusServer
// for forward compatibility
type SvcStatusServer interface {
	SendStatus(context.Context, *PbStatus) (*PbResp, error)
	SendStatuses(context.Context, *PbStatuses) (*PbResp, error)
	mustEmbedUnimplementedSvcStatusServer()
}

// UnimplementedSvcStatusServer must be embedded to have forward compatible implementations.
type UnimplementedSvcStatusServer struct {
}

func (UnimplementedSvcStatusServer) SendStatus(context.Context, *PbStatus) (*PbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStatus not implemented")
}
func (UnimplementedSvcStatusServer) SendStatuses(context.Context, *PbStatuses) (*PbResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStatuses not implemented")
}
func (UnimplementedSvcStatusServer) mustEmbedUnimplementedSvcStatusServer() {}

// UnsafeSvcStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SvcStatusServer will
// result in compilation errors.
type UnsafeSvcStatusServer interface {
	mustEmbedUnimplementedSvcStatusServer()
}

func RegisterSvcStatusServer(s grpc.ServiceRegistrar, srv SvcStatusServer) {
	s.RegisterService(&SvcStatus_ServiceDesc, srv)
}

func _SvcStatus_SendStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcStatusServer).SendStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PbStatus.SvcStatus/SendStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcStatusServer).SendStatus(ctx, req.(*PbStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _SvcStatus_SendStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcStatusServer).SendStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PbStatus.SvcStatus/SendStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcStatusServer).SendStatuses(ctx, req.(*PbStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

// SvcStatus_ServiceDesc is the grpc.ServiceDesc for SvcStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SvcStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PbStatus.SvcStatus",
	HandlerType: (*SvcStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendStatus",
			Handler:    _SvcStatus_SendStatus_Handler,
		},
		{
			MethodName: "SendStatuses",
			Handler:    _SvcStatus_SendStatuses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "status.proto",
}
